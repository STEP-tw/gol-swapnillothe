{"version":3,"sources":["_src/gameOfLife.js","_src/lib.js","_src/libUtil.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["getNextGeneration","require","module","exports","nextGeneration","currGeneration","bounds","isBetween","getAdjacentNumbers","contains","createNumberSeries","zipArrays","neighbourValidator","cell","topLeft","bottomRight","getAllNeighbour","position","neighbours","map","splice","getValidNeighbour","isValid","bind","Infinity","filter","willAlive","previousState","isAlive","getValidNeighbours","3","2","undefined","length","getWorld","_len","arguments","size","Array","_key","xCoOrdinates","yCoOrdinates","currentGeneration","world","testingAliveness","getNthGeneration","n","index","increment","number","limit","startingNumber","fill","rowGenerator","rowLength","num","createGrid","row","column","number1","number2","number3","list","element","some","e","_ref","_ref2","Object","_home_travis_build_STEP_tw_gol_swapnillothe_gol_ui_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","set1","set2","zippedArray","x","y","push","Cell","react_default","a","createElement","width","height","this","props","color","col","stroke","strokeWidth","Component","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","_this2","timerID","setInterval","tick","setState","cells","colors","i","j","src_Cell","concat","genCells","forEach","join","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6cea87ca.chunk.js","sourcesContent":["const { getNextGeneration } = require('./lib.js');\nconst nextGeneration = function(currGeneration,bounds) {\n  return getNextGeneration( currGeneration, bounds );\n}\n\nmodule.exports = { nextGeneration };\n","const {\n  isBetween,\n  getAdjacentNumbers,\n  contains,\n  createNumberSeries,\n  zipArrays\n} = require('./libUtil.js');\n\nconst neighbourValidator = function( bounds, cell ){\n  let { topLeft, bottomRight } = bounds;\n  let isValid = isBetween( topLeft[0], cell[0], bottomRight[0] );\n  return isValid && isBetween( topLeft[1], cell[1], bottomRight[1] );\n}\n\nconst getAllNeighbour = function( position ){\n  let neighbours = zipArrays( position.map( getAdjacentNumbers ) );\n  neighbours.splice(4,1);\n  return neighbours;\n}\n\nconst getValidNeighbour = function(  bounds, position ){\n  let isValid = neighbourValidator.bind( null, bounds );\n  let neighbours = getAllNeighbour( position );\n  if( bounds==Infinity ){ return neighbours };\n  return neighbours.filter( isValid );\n}\n\nconst willAlive = function( previousState, bounds, cell ){\n  let isAlive = contains.bind( null, previousState );\n  let getValidNeighbours = getValidNeighbour.bind( null, bounds );\n  let aliveConditions = { 3 : true, 2 : isAlive( cell ), undefined : false };\n  let aliveSubConditions = { 3 : 3, 2 : 2 };\n  let aliveNeighboursNo = getValidNeighbours( cell ).filter( isAlive ).length;\n  return aliveConditions[ aliveSubConditions[ aliveNeighboursNo ] ];\n}\n\nconst getWorld = function( ...size ){\n  let xCoOrdinates = createNumberSeries( (size[1][0]-size[0][0]+1), size[0][0] );\n  let yCoOrdinates = createNumberSeries( (size[1][1]-size[0][1]+1), size[0][1] );\n  return zipArrays( [ xCoOrdinates, yCoOrdinates ] );\n}\n\nconst getNextGeneration = function ( currentGeneration, bounds ){\n  let { topLeft, bottomRight } = bounds;\n  let world = getWorld( topLeft, bottomRight );\n  let testingAliveness = willAlive.bind( null, currentGeneration, bounds );\n  return world.filter( testingAliveness );\n}\n\nconst getNthGeneration = function( currentGeneration, bounds, n ){\n  for( let index = 0; index < n; index++ ){\n    currentGeneration = getNextGeneration( currentGeneration, bounds );\n  }\n  return currentGeneration;\n}\n\nmodule.exports = {\n  getAllNeighbour,\n  neighbourValidator,\n  getValidNeighbour,\n  willAlive,\n  getWorld,\n  getNextGeneration,\n  getNthGeneration\n}\n","const getAdjacentNumbers = function( num ){\n  return [ num-1, num, num+1 ];\n}\n\nconst increment = function( number=0 ){\n  return ()=>number++;\n}\n\nconst createNumberSeries = function( limit, startingNumber=0 ){\n  let series = new Array( limit ).fill( \"\" );\n  return series.map( increment( startingNumber ) );\n}\n\nconst isBetween = function( number1, number2, number3 ){\n  return number1 <= number2 && number2 <= number3;\n}\n\nconst rowGenerator = function( rowLength ){\n  return ()=> new Array( rowLength ).fill(0);\n}\n\nconst createGrid = function( row, column ){\n  return createNumberSeries( row ).map( rowGenerator( column ) );\n}\n\nconst contains = function( list, element ){\n  return list.some(e=>e[0]===element[0] && e[1]===element[1]);\n}\n\nconst zipArrays = function([ set1, set2 ]){\n  let zippedArray = [];\n  set1.map((x)=>{set2.map((y)=>{zippedArray.push([x,y]);});});\n  return zippedArray;\n}\n\nmodule.exports = {\n  getAdjacentNumbers,\n  increment,\n  createNumberSeries,\n  rowGenerator,\n  createGrid,\n  isBetween,\n  contains,\n  zipArrays\n}\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}